type token =
  | INT of (int)
  | ID of (string)
  | BOOL of (bool)
  | MATCH
  | WITH
  | VBER
  | WILD
  | END
  | FUN
  | ARROW
  | LET
  | IN
  | EQ
  | REC
  | AND
  | IF
  | THEN
  | ELSE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | LESS
  | LPAR
  | RPAR
  | COMMA
  | LBRA
  | RBRA
  | SEMIC
  | CONS
  | EOF
  | EOC

open Parsing;;
let _ = parse_error;;
# 2 "ex2Parser.mly"
  open Syntax
  (* ここに書いたものは，ExampleParser.mliに入らないので注意 *)
# 41 "ex2Parser.ml"
let yytransl_const = [|
  260 (* MATCH *);
  261 (* WITH *);
  262 (* VBER *);
  263 (* WILD *);
  264 (* END *);
  265 (* FUN *);
  266 (* ARROW *);
  267 (* LET *);
  268 (* IN *);
  269 (* EQ *);
  270 (* REC *);
  271 (* AND *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* TIMES *);
  278 (* DIVIDE *);
  279 (* LESS *);
  280 (* LPAR *);
  281 (* RPAR *);
  282 (* COMMA *);
  283 (* LBRA *);
  284 (* RBRA *);
  285 (* SEMIC *);
  286 (* CONS *);
    0 (* EOF *);
  287 (* EOC *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
  259 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\005\000\005\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\006\000\006\000\007\000\007\000\007\000\009\000\009\000\009\000\
\010\000\010\000\010\000\011\000\011\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\013\000\013\000\008\000\008\000\
\008\000\008\000\008\000\008\000\015\000\015\000\016\000\016\000\
\014\000\014\000\004\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\004\000\006\000\008\000\006\000\004\000\
\003\000\005\000\008\000\010\000\006\000\006\000\004\000\001\000\
\005\000\003\000\003\000\003\000\001\000\003\000\003\000\001\000\
\003\000\003\000\001\000\002\000\001\000\001\000\001\000\001\000\
\003\000\005\000\002\000\003\000\003\000\001\000\001\000\001\000\
\003\000\003\000\002\000\001\000\003\000\001\000\003\000\001\000\
\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\030\000\032\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\000\000\051\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\000\000\002\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\050\000\044\000\000\000\
\000\000\040\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\043\000\010\000\000\000\000\000\000\000\000\000\034\000\000\000\
\000\000\000\000\041\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\000\000\047\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000"

let yydgoto = "\002\000\
\012\000\013\000\029\000\066\000\109\000\067\000\015\000\068\000\
\016\000\017\000\018\000\019\000\030\000\069\000\079\000\080\000"

let yysindex = "\002\000\
\088\255\000\000\000\000\000\000\000\000\130\255\045\255\064\255\
\130\255\130\255\049\255\000\000\004\000\231\254\018\255\055\255\
\016\255\021\255\000\000\066\255\253\254\000\000\069\255\045\255\
\074\255\032\255\075\255\000\000\056\255\080\255\000\000\000\000\
\130\255\021\255\021\255\021\255\021\255\021\255\021\255\000\000\
\045\255\101\255\118\255\130\255\045\255\130\255\130\255\000\000\
\130\255\130\255\000\000\231\254\055\255\055\255\016\255\016\255\
\021\255\021\255\045\255\130\255\000\000\000\000\000\000\118\255\
\089\255\000\000\108\255\114\255\000\000\231\254\105\255\014\255\
\053\255\039\255\000\000\115\255\014\255\058\255\104\255\110\255\
\000\000\000\000\130\255\130\255\130\255\130\255\000\000\130\255\
\118\255\118\255\000\000\000\000\006\255\002\255\231\254\231\254\
\003\255\111\255\000\000\113\255\000\000\118\255\130\255\045\255\
\045\255\000\000\231\254\045\255\128\255\128\255\131\255\130\255\
\130\255\231\254\251\254\045\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\244\000\163\000\
\082\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\119\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\001\190\000\217\000\109\000\136\000\
\028\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\001\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\123\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\141\255\008\000\069\001\096\001\
\000\000\123\255\000\000\125\255\000\000\000\000\000\000\000\000\
\000\000\000\000\123\001\000\000\021\000\000\000\000\000\000\000\
\000\000\150\001\013\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\010\000\022\000\212\255\049\000\000\000\201\255\
\068\000\070\000\072\000\238\255\102\000\000\000\064\000\065\000"

let yytablesize = 693
let yytable = "\040\000\
\027\000\043\000\001\000\031\000\033\000\003\000\004\000\005\000\
\078\000\116\000\014\000\102\000\008\000\103\000\103\000\021\000\
\104\000\105\000\026\000\027\000\006\000\003\000\004\000\005\000\
\033\000\085\000\033\000\025\000\023\000\025\000\034\000\033\000\
\033\000\098\000\100\000\033\000\038\000\039\000\040\000\040\000\
\035\000\042\000\052\000\033\000\010\000\045\000\022\000\011\000\
\047\000\003\000\004\000\005\000\006\000\070\000\026\000\072\000\
\073\000\007\000\074\000\020\000\110\000\033\000\059\000\087\000\
\009\000\022\000\071\000\022\000\033\000\077\000\086\000\117\000\
\010\000\036\000\037\000\011\000\028\000\024\000\044\000\041\000\
\076\000\024\000\033\000\089\000\050\000\033\000\046\000\090\000\
\003\000\004\000\005\000\006\000\093\000\094\000\095\000\096\000\
\007\000\097\000\008\000\048\000\049\000\053\000\054\000\009\000\
\033\000\055\000\056\000\051\000\022\000\057\000\058\000\010\000\
\107\000\060\000\011\000\082\000\081\000\084\000\061\000\022\000\
\062\000\114\000\115\000\083\000\063\000\108\000\108\000\088\000\
\091\000\111\000\003\000\004\000\005\000\006\000\092\000\023\000\
\089\000\108\000\007\000\112\000\020\000\064\000\090\000\113\000\
\065\000\009\000\038\000\046\000\018\000\048\000\106\000\075\000\
\099\000\010\000\101\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\000\027\000\000\000\
\027\000\000\000\000\000\000\000\027\000\027\000\009\000\027\000\
\000\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\008\000\027\000\027\000\000\000\027\000\027\000\027\000\027\000\
\025\000\025\000\032\000\025\000\003\000\004\000\005\000\025\000\
\025\000\015\000\025\000\008\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\006\000\025\000\025\000\000\000\025\000\
\025\000\025\000\025\000\026\000\026\000\000\000\026\000\000\000\
\000\000\000\000\026\000\026\000\013\000\026\000\000\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\000\000\026\000\
\026\000\000\000\026\000\026\000\026\000\026\000\024\000\024\000\
\000\000\024\000\000\000\000\000\000\000\024\000\024\000\014\000\
\024\000\000\000\024\000\024\000\024\000\024\000\000\000\000\000\
\024\000\000\000\024\000\024\000\000\000\024\000\024\000\024\000\
\024\000\022\000\022\000\000\000\022\000\000\000\000\000\000\000\
\022\000\022\000\011\000\022\000\000\000\022\000\022\000\022\000\
\022\000\000\000\000\000\022\000\000\000\022\000\022\000\000\000\
\022\000\022\000\022\000\022\000\023\000\023\000\000\000\023\000\
\000\000\000\000\000\000\023\000\023\000\012\000\023\000\000\000\
\023\000\023\000\023\000\023\000\000\000\000\000\023\000\000\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\021\000\
\021\000\000\000\021\000\000\000\000\000\000\000\021\000\021\000\
\000\000\021\000\000\000\021\000\021\000\000\000\000\000\000\000\
\000\000\021\000\000\000\021\000\021\000\000\000\021\000\021\000\
\021\000\021\000\020\000\020\000\000\000\020\000\000\000\000\000\
\000\000\020\000\020\000\000\000\020\000\000\000\020\000\020\000\
\000\000\000\000\000\000\000\000\020\000\000\000\020\000\020\000\
\000\000\020\000\020\000\020\000\020\000\019\000\019\000\000\000\
\019\000\000\000\000\000\000\000\019\000\019\000\000\000\019\000\
\000\000\019\000\019\000\000\000\000\000\000\000\000\000\019\000\
\000\000\019\000\019\000\000\000\019\000\019\000\019\000\019\000\
\016\000\016\000\000\000\016\000\000\000\000\000\000\000\016\000\
\000\000\000\000\016\000\000\000\016\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\016\000\000\000\016\000\
\016\000\016\000\016\000\009\000\009\000\000\000\009\000\000\000\
\000\000\000\000\009\000\000\000\000\000\009\000\000\000\009\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\009\000\000\000\009\000\009\000\000\000\009\000\015\000\015\000\
\000\000\015\000\000\000\000\000\000\000\015\000\000\000\000\000\
\015\000\000\000\015\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\015\000\000\000\015\000\015\000\000\000\
\015\000\013\000\013\000\000\000\013\000\000\000\000\000\000\000\
\013\000\000\000\000\000\013\000\000\000\013\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\000\013\000\000\000\
\013\000\013\000\000\000\013\000\014\000\014\000\000\000\014\000\
\000\000\000\000\000\000\014\000\000\000\000\000\014\000\000\000\
\014\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\014\000\000\000\014\000\014\000\000\000\014\000\011\000\
\011\000\000\000\011\000\000\000\000\000\000\000\011\000\000\000\
\000\000\011\000\000\000\011\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\011\000\000\000\011\000\011\000\
\000\000\011\000\012\000\012\000\000\000\012\000\000\000\000\000\
\000\000\012\000\000\000\000\000\012\000\000\000\012\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\000\000\012\000\012\000\000\000\012\000"

let yycheck = "\018\000\
\000\000\005\001\001\000\000\000\030\001\000\000\000\000\000\000\
\064\000\015\001\001\000\006\001\000\000\012\001\012\001\006\000\
\015\001\015\001\009\000\010\000\000\000\001\001\002\001\003\001\
\030\001\012\001\030\001\000\000\007\000\008\000\013\001\030\001\
\030\001\089\000\090\000\030\001\021\001\022\001\057\000\058\000\
\023\001\020\000\033\000\030\001\024\001\024\000\002\001\027\001\
\017\001\001\001\002\001\003\001\004\001\044\000\000\000\046\000\
\047\000\009\001\049\000\011\001\105\000\030\001\041\000\025\001\
\016\001\002\001\045\000\002\001\030\001\060\000\018\001\116\000\
\024\001\019\001\020\001\027\001\028\001\014\001\010\001\014\001\
\059\000\000\000\030\001\026\001\029\001\030\001\013\001\030\001\
\001\001\002\001\003\001\004\001\083\000\084\000\085\000\086\000\
\009\001\088\000\011\001\025\001\026\001\034\000\035\000\016\001\
\030\001\036\000\037\000\028\001\000\000\038\000\039\000\024\001\
\103\000\013\001\027\001\008\001\028\001\013\001\001\001\002\001\
\003\001\112\000\113\000\010\001\007\001\104\000\105\000\013\001\
\025\001\108\000\001\001\002\001\003\001\004\001\025\001\000\000\
\026\001\116\000\009\001\012\001\011\001\024\001\030\001\013\001\
\027\001\016\001\028\001\025\001\008\001\025\001\102\000\050\000\
\089\000\024\001\090\000\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\255\255\
\008\001\255\255\255\255\255\255\012\001\013\001\000\000\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\012\001\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\005\001\006\001\031\001\008\001\031\001\031\001\031\001\012\001\
\013\001\000\000\015\001\031\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\031\001\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\005\001\006\001\255\255\008\001\255\255\
\255\255\255\255\012\001\013\001\000\000\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\005\001\006\001\
\255\255\008\001\255\255\255\255\255\255\012\001\013\001\000\000\
\015\001\255\255\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\255\255\025\001\026\001\255\255\028\001\029\001\030\001\
\031\001\005\001\006\001\255\255\008\001\255\255\255\255\255\255\
\012\001\013\001\000\000\015\001\255\255\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\026\001\255\255\
\028\001\029\001\030\001\031\001\005\001\006\001\255\255\008\001\
\255\255\255\255\255\255\012\001\013\001\000\000\015\001\255\255\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\255\255\
\025\001\026\001\255\255\028\001\029\001\030\001\031\001\005\001\
\006\001\255\255\008\001\255\255\255\255\255\255\012\001\013\001\
\255\255\015\001\255\255\017\001\018\001\255\255\255\255\255\255\
\255\255\023\001\255\255\025\001\026\001\255\255\028\001\029\001\
\030\001\031\001\005\001\006\001\255\255\008\001\255\255\255\255\
\255\255\012\001\013\001\255\255\015\001\255\255\017\001\018\001\
\255\255\255\255\255\255\255\255\023\001\255\255\025\001\026\001\
\255\255\028\001\029\001\030\001\031\001\005\001\006\001\255\255\
\008\001\255\255\255\255\255\255\012\001\013\001\255\255\015\001\
\255\255\017\001\018\001\255\255\255\255\255\255\255\255\023\001\
\255\255\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\005\001\006\001\255\255\008\001\255\255\255\255\255\255\012\001\
\255\255\255\255\015\001\255\255\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\005\001\006\001\255\255\008\001\255\255\
\255\255\255\255\012\001\255\255\255\255\015\001\255\255\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001\255\255\031\001\005\001\006\001\
\255\255\008\001\255\255\255\255\255\255\012\001\255\255\255\255\
\015\001\255\255\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\255\255\028\001\029\001\255\255\
\031\001\005\001\006\001\255\255\008\001\255\255\255\255\255\255\
\012\001\255\255\255\255\015\001\255\255\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\255\255\
\028\001\029\001\255\255\031\001\005\001\006\001\255\255\008\001\
\255\255\255\255\255\255\012\001\255\255\255\255\015\001\255\255\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\255\255\031\001\005\001\
\006\001\255\255\008\001\255\255\255\255\255\255\012\001\255\255\
\255\255\015\001\255\255\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\255\255\028\001\029\001\
\255\255\031\001\005\001\006\001\255\255\008\001\255\255\255\255\
\255\255\012\001\255\255\255\255\015\001\255\255\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\255\255\031\001"

let yynames_const = "\
  MATCH\000\
  WITH\000\
  VBER\000\
  WILD\000\
  END\000\
  FUN\000\
  ARROW\000\
  LET\000\
  IN\000\
  EQ\000\
  REC\000\
  AND\000\
  IF\000\
  THEN\000\
  ELSE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  LESS\000\
  LPAR\000\
  RPAR\000\
  COMMA\000\
  LBRA\000\
  RBRA\000\
  SEMIC\000\
  CONS\000\
  EOF\000\
  EOC\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'command) in
    Obj.repr(
# 24 "ex2Parser.mly"
                                  ( _1 )
# 381 "ex2Parser.ml"
               : Syntax.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'command) in
    Obj.repr(
# 25 "ex2Parser.mly"
                                  ( _1 )
# 388 "ex2Parser.ml"
               : Syntax.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "ex2Parser.mly"
                                        ( CExp(_1) )
# 395 "ex2Parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "ex2Parser.mly"
                                        ( CLet(_2,_4) )
# 403 "ex2Parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 31 "ex2Parser.mly"
                                        ( CRLet(_3,_4,_6) )
# 412 "ex2Parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'letrec) in
    Obj.repr(
# 32 "ex2Parser.mly"
                                        ( CRALet((_3,_4,_6)::_8) )
# 422 "ex2Parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'var) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'letrec) in
    Obj.repr(
# 36 "ex2Parser.mly"
                                ( (_1,_2,_4)::_6 )
# 432 "ex2Parser.ml"
               : 'letrec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "ex2Parser.mly"
                                ( [(_1,_2,_4)] )
# 441 "ex2Parser.ml"
               : 'letrec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "ex2Parser.mly"
                                               ( ECons(_1,_3) )
# 449 "ex2Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pmatch) in
    Obj.repr(
# 42 "ex2Parser.mly"
                                               ( EMatch(_2,_4) )
# 457 "ex2Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "ex2Parser.mly"
                                               ( ERLet(_3,_4,_6,_8) )
# 467 "ex2Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'var) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'letrec) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "ex2Parser.mly"
                                               ( ERALet((_3,_4,_6)::_8,_10) )
# 478 "ex2Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "ex2Parser.mly"
                                               ( ELet(_2,_4,_6) )
# 487 "ex2Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "ex2Parser.mly"
                                               ( Eif(_2,_4,_6) )
# 496 "ex2Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "ex2Parser.mly"
                                               ( EFun(_2,(_4)) )
# 504 "ex2Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bool_expr) in
    Obj.repr(
# 48 "ex2Parser.mly"
                                               ( _1 )
# 511 "ex2Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pmatch) in
    Obj.repr(
# 52 "ex2Parser.mly"
                                            ( (_1,_3)::_5 )
# 520 "ex2Parser.ml"
               : 'pmatch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "ex2Parser.mly"
                                            ( [(_1,_3)] )
# 528 "ex2Parser.ml"
               : 'pmatch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bool_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 57 "ex2Parser.mly"
                                  ( Ebin(OpLe,_1,_3) )
# 536 "ex2Parser.ml"
               : 'bool_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bool_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 58 "ex2Parser.mly"
                                  ( Ebin(OpEq,_1,_3) )
# 544 "ex2Parser.ml"
               : 'bool_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 59 "ex2Parser.mly"
                                  ( _1 )
# 551 "ex2Parser.ml"
               : 'bool_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 63 "ex2Parser.mly"
                                  ( Ebin(OpAdd,_1,_3) )
# 559 "ex2Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 64 "ex2Parser.mly"
                                  ( Ebin(OpSub,_1,_3) )
# 567 "ex2Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 65 "ex2Parser.mly"
                                  ( _1 )
# 574 "ex2Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factor_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_expr) in
    Obj.repr(
# 69 "ex2Parser.mly"
                                  ( Ebin(OpMul,_1,_3) )
# 582 "ex2Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factor_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_expr) in
    Obj.repr(
# 70 "ex2Parser.mly"
                                  ( Ebin(OpDiv,_1,_3) )
# 590 "ex2Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_expr) in
    Obj.repr(
# 71 "ex2Parser.mly"
                                  ( _1 )
# 597 "ex2Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'app_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 75 "ex2Parser.mly"
                                  ( EApp(_1,_2) )
# 605 "ex2Parser.ml"
               : 'app_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 76 "ex2Parser.mly"
                                  ( _1 )
# 612 "ex2Parser.ml"
               : 'app_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 80 "ex2Parser.mly"
                                  ( Evalue (VInt _1) )
# 619 "ex2Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 81 "ex2Parser.mly"
                                  ( Evalue (VBool _1) )
# 626 "ex2Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 82 "ex2Parser.mly"
                                  ( Evar (_1) )
# 633 "ex2Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "ex2Parser.mly"
                                  ( _2 )
# 640 "ex2Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "ex2Parser.mly"
                                  ( EPair (_2,_4) )
# 648 "ex2Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "ex2Parser.mly"
                                  ( ENil )
# 654 "ex2Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 86 "ex2Parser.mly"
                                  ( _2 )
# 661 "ex2Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 90 "ex2Parser.mly"
                                  ( ECons(_1,_3) )
# 669 "ex2Parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "ex2Parser.mly"
                                  ( ECons(_1,ENil) )
# 676 "ex2Parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 95 "ex2Parser.mly"
                                  ( Value(_1) )
# 683 "ex2Parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 96 "ex2Parser.mly"
                                  ( Name(_1) )
# 690 "ex2Parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'p_tuple) in
    Obj.repr(
# 97 "ex2Parser.mly"
                                  ( PTuple _2 )
# 697 "ex2Parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'p_list) in
    Obj.repr(
# 98 "ex2Parser.mly"
                                  ( PList _2 )
# 704 "ex2Parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "ex2Parser.mly"
                                  ( PList [] )
# 710 "ex2Parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "ex2Parser.mly"
                                  ( PWild )
# 716 "ex2Parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'p_tuple) in
    Obj.repr(
# 104 "ex2Parser.mly"
                                  ( _1::_3 )
# 724 "ex2Parser.ml"
               : 'p_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pat) in
    Obj.repr(
# 105 "ex2Parser.mly"
                                  ( [_1] )
# 731 "ex2Parser.ml"
               : 'p_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'p_list) in
    Obj.repr(
# 109 "ex2Parser.mly"
                                  ( _1::_3 )
# 739 "ex2Parser.ml"
               : 'p_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pat) in
    Obj.repr(
# 110 "ex2Parser.mly"
                                  ( [_1] )
# 746 "ex2Parser.ml"
               : 'p_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 113 "ex2Parser.mly"
                                  ( VInt _1 )
# 753 "ex2Parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 114 "ex2Parser.mly"
                                  ( VBool _1 )
# 760 "ex2Parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "ex2Parser.mly"
                                  ( _1 )
# 767 "ex2Parser.ml"
               : 'var))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.command)
